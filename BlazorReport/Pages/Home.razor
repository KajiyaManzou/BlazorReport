@page "/"
@inject EmployeeService EmployeeService
@inject ExcelExportService ExcelExportService
@inject IJSRuntime JSRuntime

<PageTitle>社員情報管理</PageTitle>

<div class="container-fluid mt-4">
    <h2 class="mb-4">社員情報管理</h2>

    <div class="mb-3">
        <Button Color="Color.Success" Icon="fa-solid fa-file-excel" OnClick="ExportToExcel" class="me-2">
            Excelエクスポート
        </Button>
        <Button Color="Color.Danger" Icon="fa-solid fa-file-pdf" OnClick="ExportToPdf">
            PDFエクスポート
        </Button>
    </div>

    @if (employees == null)
    {
        <p><em>データを読み込んでいます...</em></p>
    }
    else if (employees.Count == 0)
    {
        <p><em>データがありません。</em></p>
    }
    else
    {
        <Table TItem="Employee"
               Items="@employees"
               IsBordered="true"
               IsStriped="true"
               AutoGenerateColumns="false">
            <TableColumns>
                <TableColumn @bind-Field="@context.EmployeeNumber" Text="社員番号" Sortable="true" />
                <TableColumn @bind-Field="@context.Name" Text="氏名" Sortable="true" />
                <TableColumn @bind-Field="@context.Department" Text="所属" Sortable="true" />
                <TableColumn @bind-Field="@context.Post" Text="役職" Sortable="true" />
                <TableColumn @bind-Field="@context.DateOfJoining" Text="入社年月日" Sortable="true" />
            </TableColumns>
        </Table>
    }
</div>

@code {
    private List<Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployeesAsync();
    }

    private async Task ExportToExcel()
    {
        if (employees == null || employees.Count == 0)
        {
            return;
        }

        try
        {
            // Excelファイルを生成
            var excelBytes = ExcelExportService.ExportToExcel(employees);

            // JavaScriptを呼び出してダウンロード
            var fileName = $"社員情報_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";
            await JSRuntime.InvokeVoidAsync(
                "fileDownloadFunctions.downloadFile",
                fileName,
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                excelBytes
            );
        }
        catch (Exception ex)
        {
            System.Console.WriteLine($"Excel export error: {ex.Message}");
        }
    }

    private async Task ExportToPdf()
    {
        if (employees == null || employees.Count == 0)
        {
            return;
        }

        try
        {
            // JavaScriptに渡すために匿名オブジェクトの配列に変換
            // プロパティ名を明示的にcamelCaseで指定
            var employeeData = employees.Select(e => new
            {
                employeeNumber = e.EmployeeNumber,
                name = e.Name,
                department = e.Department,
                post = e.Post,
                dateOfJoining = e.DateOfJoining
            }).ToArray();

            System.Console.WriteLine($"Exporting {employeeData.Length} employees to PDF");

            // JavaScriptを呼び出してPDFを生成・ダウンロード
            // Canvas版を使用（日本語対応）
            var fileName = $"社員情報_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            await JSRuntime.InvokeVoidAsync(
                "pdfExportFunctions.exportToPdfCanvas",
                employeeData,
                fileName
            );
        }
        catch (Exception ex)
        {
            System.Console.WriteLine($"PDF export error: {ex.Message}");
        }
    }
}

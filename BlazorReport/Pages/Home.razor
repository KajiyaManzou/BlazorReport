@page "/"
@inject EmployeeService EmployeeService

<PageTitle>社員情報管理</PageTitle>

<div class="container-fluid mt-4">
    <h2 class="mb-4">社員情報管理</h2>

    <div class="mb-3">
        <Button Color="Color.Success" Icon="fa-solid fa-file-excel" OnClick="ExportToExcel" class="me-2">
            Excelエクスポート
        </Button>
        <Button Color="Color.Danger" Icon="fa-solid fa-file-pdf" OnClick="ExportToPdf">
            PDFエクスポート
        </Button>
    </div>

    @if (employees == null)
    {
        <p><em>データを読み込んでいます...</em></p>
    }
    else if (employees.Count == 0)
    {
        <p><em>データがありません。</em></p>
    }
    else
    {
        <Table TItem="Employee"
               Items="@employees"
               IsBordered="true"
               IsStriped="true"
               AutoGenerateColumns="false">
            <TableColumns>
                <TableColumn @bind-Field="@context.EmployeeNumber" Text="社員番号" Sortable="true" />
                <TableColumn @bind-Field="@context.Name" Text="氏名" Sortable="true" />
                <TableColumn @bind-Field="@context.Department" Text="所属" Sortable="true" />
                <TableColumn @bind-Field="@context.Post" Text="役職" Sortable="true" />
                <TableColumn @bind-Field="@context.DateOfJoining" Text="入社年月日" Sortable="true" />
            </TableColumns>
        </Table>
    }
</div>

@code {
    private List<Employee>? employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployeesAsync();
    }

    private async Task ExportToExcel()
    {
        // Excel エクスポート処理（後で実装）
        await Task.CompletedTask;
    }

    private async Task ExportToPdf()
    {
        // PDF エクスポート処理（後で実装）
        await Task.CompletedTask;
    }
}
